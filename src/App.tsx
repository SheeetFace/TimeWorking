
import React, { useState } from 'react';
import './App.css';
import * as XLSX from 'xlsx';

const getDateFromString = (str:any, hasDate=false, i:number) => {
  const dateRegex = /(\d{1,2}).(\d{1,2}).(\d{4})/;
  const timeRegex = /(\d{1,2}):(\d{2})/;

  console.log(str)
  if(str !== undefined){
    const [time, date] = str.split(' ');

  let result:any = {
    date: new Date(),
    hours: 0,
    minutes: 0
  };

  if (hasDate) {
    const [, day, month, year] = dateRegex.exec(date) || [];
    result.date = new Date(`${year}-${month}-${day}`);
  }

  const [, hours, minutes] = timeRegex.exec(time) || [];
  result.hours = hours === "00" || hours === "0" ? 0 : parseInt(hours);
  result.minutes = minutes === "00" || minutes === "0" ? 0 : parseInt(minutes);

  return result;
  }
 
}

const findKey = (obj: any, searchString: string) => {
  for (let key in obj) {
    if (key.includes(searchString)) {
      return key;
    }
  }
}

const App: React.FC = () => {

  const [status, setStatus] =useState<'IDLE'|'SUCCESS'>('IDLE')


  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files![0];
    const reader = new FileReader();

    reader.onload = (e: ProgressEvent<FileReader>) => {
      const data = e.target!.result;
      const workbook = XLSX.read(data, {type: 'array'});

      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];

      const excelData = XLSX.utils.sheet_to_json(sheet, {blankrows: true});

      const updatedData = getWorkingTime(excelData); 
      // console.log(updatedData)
      createNewFile(updatedData)
    }

    reader.readAsArrayBuffer(file);
  };

  const getWorkingTime = (excelData:any) => {

    excelData.forEach((row:any, i:number) => {
      const entryKey:any = findKey(row, '[–í—Ö–æ–¥]');
      const exitKey:any = findKey(row, '[–í—ã—Ö–æ–¥]');
      

      
      if(typeof exitKey !== 'undefined' || typeof entryKey !== 'undefined'){

        const entryTime:any = getDateFromString(row[entryKey],false,i);

        let exitTime:any;
        let duration;
        if (exitKey) {
          const timeFormatRegex = /^\d{2}:\d{2}$/;
          
          if (timeFormatRegex.test(row[exitKey])) {
            exitTime = getDateFromString(row[exitKey], false,i);
            duration = (exitTime.hours * 60 + exitTime.minutes) - (entryTime.hours * 60 + entryTime.minutes);
          } else if (row[exitKey].includes('.')) {
            exitTime = getDateFromString(row[exitKey], true,i);
            duration = (exitTime.hours * 60 + exitTime.minutes + 24 * 60) - (entryTime.hours * 60 + entryTime.minutes);
          } else {
            duration = 0;
          }
        } else {
          duration = 0;
        }
    
        const hours = Math.floor(duration / 60);
        const minutes = duration % 60;
      
        const formattedHours = hours < 10 ? `0${hours}` : hours;  
        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
            
        const formattedDuration = `${formattedHours}:${formattedMinutes}`;
            
        row["–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ"] = formattedDuration;
        row["–í—Å–µ–≥–æ"] = formattedDuration;
      }
    
    });
    
    return excelData;
  }

    const createNewFile=(updatedData:any)=>{

    const newWorkbook = XLSX.utils.book_new();

    const newWorksheet = XLSX.utils.json_to_sheet(updatedData);

    XLSX.utils.book_append_sheet(newWorkbook, newWorksheet, "–ß–ê–°–´ –†–ê–ë–û–¢–´ –†–ê–ë–û–ß–ò–•");

    const excelBuffer = XLSX.write(newWorkbook, {type: 'array'}); 

    const blob = new Blob([excelBuffer], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = "–æ—Ç—á–µ—Ç.xlsx";
    link.click(); 

    setStatus('SUCCESS')
  }

  if(status==='SUCCESS'){
    setTimeout(()=>{
      setStatus('IDLE')
    },1000)
  }

  return (
    // <div className='App'>
     

    // <div className='App-rules'>
    //   {status ==='IDLE' ? 
    //   <>
    //       <h1>–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –ö–û–†–†–ï–ö–¢–ù–û–ô –†–ê–ë–û–¢–´</h1>
    //       <h3>üëâüèª1. —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .xlsx</h3>

    //       <h3>üëâüèª2. –î–æ–∫—É–º–µ–Ω—Ç –ù–ï –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ, —Ç–æ–ª—å–∫–æ —Å–∞–º–∞ —Ç–∞–±–ª–∏—Ü–∞ </h3>
    //       <div>
    //         <div className='App-rules-imageBOx'>
    //           <div>
    //             <h4 style={{color:"red", fontSize:'2rem'}}>–ù–ï –í–ï–†–ù–û</h4>
    //             <img  src='https://cdn.discordapp.com/attachments/872343092500504628/1133728142620635236/image.png' alt=''></img>
    //           </div>

    //           <div>
    //             <h4 style={{color:"green",fontSize:'2rem'}}>–í–ï–†–ù–û</h4>
    //             <img src='https://cdn.discordapp.com/attachments/872343092500504628/1133726399694372905/image.png' alt=''></img>
    //           </div>
    //         </div>
    //       </div>
    //       <h3>üëâüèª3. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ù–ê–ó–í–ê–ù–ò–Ø–• –¢–ê–ë–õ–ò–¶–´ –° –ü–†–ò–•–û–î–û–ú –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û üëâüèª[–í—Ö–æ–¥]üëàüèª, —á—Ç–æ –ø–µ—Ä–µ–¥ –Ω–∏–º –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è. –≠—Ç–æ–≥–æ –∂–µ –∫–∞—á–∞–µ—Ç—Å—è –∏ üëâüèª[–í—ã—Ö–æ–¥]üëàüèª  </h3>
    //       <h3>üëâüèª4. [–í—Ö–æ–¥] —Å —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ 25.07.2023 07:32 - –ù–ï –ë–£–î–ï–¢ –ü–û–°–ß–ò–¢–ê–ù, —Ç–æ–ª—å–∫–æ —Å —Ç–∞–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º 07:32 </h3>
    //       <h3>üëâüèª5. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞, —Å—Ä–∞–∑—É –∂–µ –±—É–¥–µ—Ç —Å–∫–∞—á–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–æ—Ç—á–µ—Ç.xlsx" 
    //       –í  –ù–æ–≤–æ–º —Ñ–∞–π–ª–µ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ 24.07.2023 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫[–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ] –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ"
    //       </h3>
    //   </>
    //   :
    //   <div className='success'>
    //     –§–ê–ô–õ –°–ö–ê–ß–ï–ù
    //   </div>
    //   }
    // </div>
    // <h3 style={{color:"white",fontSize:'2rem', textAlign:"center"}}>–ò—Ç–æ–≥ —Ç–∞–∫–æ–π, –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å —à–∞–ø–∫—É (–ø—É–Ω–∫—Ç 2) –∏ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å </h3>
    // <div className='App-box'>
    //     <input className='App-box-button' type="file" onChange={handleFileUpload} />
    //   </div>
    // </div>
        <iframe
        
          src="https://games.wavey.group/games/doom2/index.html"
          width="99.5%"
          height="700px"
          allow="autoplay"
        >
        </iframe>
  );
}

export default App;
